
dual_trafic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f8  080020f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020f8  080020f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020f8  080020f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f8  080020f8  000120f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020fc  080020fc  000120fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  0800210c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800210c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000079c0  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad2  00000000  00000000  00027a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00029510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055e  00000000  00000000  00029c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001795e  00000000  00000000  0002a196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2c3  00000000  00000000  00041af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008207d  00000000  00000000  0004bdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a64  00000000  00000000  000cde34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cf898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002080 	.word	0x08002080

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002080 	.word	0x08002080

0800014c <EW_ROAD_Init>:
 * @brief Initializes the East-West road traffic light.
 * 
 * This function sets the initial state of the East-West road traffic light to red.
 */
void EW_ROAD_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	/* Init gpio (NA as done in the MX )*/
	g_ew_state = TL_RED;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <EW_ROAD_Init+0x14>)
 8000152:	2200      	movs	r2, #0
 8000154:	701a      	strb	r2, [r3, #0]

}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000028 	.word	0x20000028

08000164 <EW_ROAD_Update>:
 * @brief Updates the state of the East-West road traffic light.
 * 
 * This function handles the state transitions of the traffic light based on the current state and time elapsed.
 */
void EW_ROAD_Update(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	static uint32_t ColorStartTime = 0;
	static uint32_t redColorStartTime ;

	switch (g_ew_state)
 8000168:	4b6e      	ldr	r3, [pc, #440]	; (8000324 <EW_ROAD_Update+0x1c0>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b04      	cmp	r3, #4
 800016e:	f200 80cb 	bhi.w	8000308 <EW_ROAD_Update+0x1a4>
 8000172:	a201      	add	r2, pc, #4	; (adr r2, 8000178 <EW_ROAD_Update+0x14>)
 8000174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000178:	0800018d 	.word	0x0800018d
 800017c:	080001f5 	.word	0x080001f5
 8000180:	08000235 	.word	0x08000235
 8000184:	08000289 	.word	0x08000289
 8000188:	080002cd 	.word	0x080002cd
	{
	case TL_RED:
	{
		/* to sync with the NS road */
		if (TRUE == NS_ROAD_IsPedestrianActive())
 800018c:	f000 f9ca 	bl	8000524 <NS_ROAD_IsPedestrianActive>
 8000190:	4603      	mov	r3, r0
 8000192:	2b01      	cmp	r3, #1
 8000194:	d10b      	bne.n	80001ae <EW_ROAD_Update+0x4a>
		{
			g_ew_state = TL_PEDESTRIAN;
 8000196:	4b63      	ldr	r3, [pc, #396]	; (8000324 <EW_ROAD_Update+0x1c0>)
 8000198:	2204      	movs	r2, #4
 800019a:	701a      	strb	r2, [r3, #0]
			redColorStartTime = ColorStartTime;
 800019c:	4b62      	ldr	r3, [pc, #392]	; (8000328 <EW_ROAD_Update+0x1c4>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a62      	ldr	r2, [pc, #392]	; (800032c <EW_ROAD_Update+0x1c8>)
 80001a2:	6013      	str	r3, [r2, #0]
			ColorStartTime = OS_GetCurrentTick();
 80001a4:	f000 fc38 	bl	8000a18 <OS_GetCurrentTick>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4a5f      	ldr	r2, [pc, #380]	; (8000328 <EW_ROAD_Update+0x1c4>)
 80001ac:	6013      	str	r3, [r2, #0]
		}
		/* Turn on red led */
		HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_SET);
 80001ae:	2201      	movs	r2, #1
 80001b0:	2102      	movs	r1, #2
 80001b2:	485f      	ldr	r0, [pc, #380]	; (8000330 <EW_ROAD_Update+0x1cc>)
 80001b4:	f001 f8eb 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 80001b8:	f000 fc2e 	bl	8000a18 <OS_GetCurrentTick>
 80001bc:	4602      	mov	r2, r0
 80001be:	4b5a      	ldr	r3, [pc, #360]	; (8000328 <EW_ROAD_Update+0x1c4>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	1ad2      	subs	r2, r2, r3
 80001c4:	4613      	mov	r3, r2
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	4413      	add	r3, r2
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	461a      	mov	r2, r3
 80001ce:	f244 634f 	movw	r3, #17999	; 0x464f
 80001d2:	429a      	cmp	r2, r3
 80001d4:	f240 809a 	bls.w	800030c <EW_ROAD_Update+0x1a8>
				>= TLC_EW_RED_TIME_S * 1000)
		{
			HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2102      	movs	r1, #2
 80001dc:	4854      	ldr	r0, [pc, #336]	; (8000330 <EW_ROAD_Update+0x1cc>)
 80001de:	f001 f8d6 	bl	800138e <HAL_GPIO_WritePin>
			g_ew_state = TL_RED_YELLOW;
 80001e2:	4b50      	ldr	r3, [pc, #320]	; (8000324 <EW_ROAD_Update+0x1c0>)
 80001e4:	2202      	movs	r2, #2
 80001e6:	701a      	strb	r2, [r3, #0]
			ColorStartTime = OS_GetCurrentTick();
 80001e8:	f000 fc16 	bl	8000a18 <OS_GetCurrentTick>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a4e      	ldr	r2, [pc, #312]	; (8000328 <EW_ROAD_Update+0x1c4>)
 80001f0:	6013      	str	r3, [r2, #0]
		}

	}
		break;
 80001f2:	e08b      	b.n	800030c <EW_ROAD_Update+0x1a8>
	case TL_YELLOW:
	{
		/* Turn on yellow led */
		HAL_GPIO_WritePin(EW_YELLOW_GPIO_Port, EW_YELLOW_Pin, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2101      	movs	r1, #1
 80001f8:	484d      	ldr	r0, [pc, #308]	; (8000330 <EW_ROAD_Update+0x1cc>)
 80001fa:	f001 f8c8 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 80001fe:	f000 fc0b 	bl	8000a18 <OS_GetCurrentTick>
 8000202:	4602      	mov	r2, r0
 8000204:	4b48      	ldr	r3, [pc, #288]	; (8000328 <EW_ROAD_Update+0x1c4>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	1ad2      	subs	r2, r2, r3
 800020a:	4613      	mov	r3, r2
 800020c:	009b      	lsls	r3, r3, #2
 800020e:	4413      	add	r3, r2
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000216:	d37b      	bcc.n	8000310 <EW_ROAD_Update+0x1ac>
				>= TLC_EW_YELLOW_TIME_S * 1000)
		{
			/* Turn off yellow and move to red state */
			HAL_GPIO_WritePin(EW_YELLOW_GPIO_Port, EW_YELLOW_Pin,
 8000218:	2200      	movs	r2, #0
 800021a:	2101      	movs	r1, #1
 800021c:	4844      	ldr	r0, [pc, #272]	; (8000330 <EW_ROAD_Update+0x1cc>)
 800021e:	f001 f8b6 	bl	800138e <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);

			g_ew_state = TL_RED;
 8000222:	4b40      	ldr	r3, [pc, #256]	; (8000324 <EW_ROAD_Update+0x1c0>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
			/* save new colour start time */
			ColorStartTime = OS_GetCurrentTick();
 8000228:	f000 fbf6 	bl	8000a18 <OS_GetCurrentTick>
 800022c:	4603      	mov	r3, r0
 800022e:	4a3e      	ldr	r2, [pc, #248]	; (8000328 <EW_ROAD_Update+0x1c4>)
 8000230:	6013      	str	r3, [r2, #0]

		}
	}
		break;
 8000232:	e06d      	b.n	8000310 <EW_ROAD_Update+0x1ac>
	case TL_RED_YELLOW:
	{
		/* Turn on red and yellow leds */
		HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	2102      	movs	r1, #2
 8000238:	483d      	ldr	r0, [pc, #244]	; (8000330 <EW_ROAD_Update+0x1cc>)
 800023a:	f001 f8a8 	bl	800138e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EW_YELLOW_GPIO_Port, EW_YELLOW_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2101      	movs	r1, #1
 8000242:	483b      	ldr	r0, [pc, #236]	; (8000330 <EW_ROAD_Update+0x1cc>)
 8000244:	f001 f8a3 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 8000248:	f000 fbe6 	bl	8000a18 <OS_GetCurrentTick>
 800024c:	4602      	mov	r2, r0
 800024e:	4b36      	ldr	r3, [pc, #216]	; (8000328 <EW_ROAD_Update+0x1c4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	1ad2      	subs	r2, r2, r3
 8000254:	4613      	mov	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	4413      	add	r3, r2
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000260:	d358      	bcc.n	8000314 <EW_ROAD_Update+0x1b0>
				>= TLC_EW_RED_YELLOW_TIME_S * 1000)
		{
			HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2102      	movs	r1, #2
 8000266:	4832      	ldr	r0, [pc, #200]	; (8000330 <EW_ROAD_Update+0x1cc>)
 8000268:	f001 f891 	bl	800138e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EW_YELLOW_GPIO_Port, EW_YELLOW_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2101      	movs	r1, #1
 8000270:	482f      	ldr	r0, [pc, #188]	; (8000330 <EW_ROAD_Update+0x1cc>)
 8000272:	f001 f88c 	bl	800138e <HAL_GPIO_WritePin>
			g_ew_state = TL_GREEN;
 8000276:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <EW_ROAD_Update+0x1c0>)
 8000278:	2203      	movs	r2, #3
 800027a:	701a      	strb	r2, [r3, #0]
			ColorStartTime = OS_GetCurrentTick();
 800027c:	f000 fbcc 	bl	8000a18 <OS_GetCurrentTick>
 8000280:	4603      	mov	r3, r0
 8000282:	4a29      	ldr	r2, [pc, #164]	; (8000328 <EW_ROAD_Update+0x1c4>)
 8000284:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8000286:	e045      	b.n	8000314 <EW_ROAD_Update+0x1b0>
	case TL_GREEN:
	{
		/* Turn on green led */
		HAL_GPIO_WritePin(EW_GREEN_GPIO_Port, EW_GREEN_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2180      	movs	r1, #128	; 0x80
 800028c:	4829      	ldr	r0, [pc, #164]	; (8000334 <EW_ROAD_Update+0x1d0>)
 800028e:	f001 f87e 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 8000292:	f000 fbc1 	bl	8000a18 <OS_GetCurrentTick>
 8000296:	4602      	mov	r2, r0
 8000298:	4b23      	ldr	r3, [pc, #140]	; (8000328 <EW_ROAD_Update+0x1c4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	4613      	mov	r3, r2
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	4413      	add	r3, r2
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	461a      	mov	r2, r3
 80002a8:	f244 634f 	movw	r3, #17999	; 0x464f
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d933      	bls.n	8000318 <EW_ROAD_Update+0x1b4>
				>= TLC_EW_GREEN_TIME_S * 1000)
		{
			/* Turn off green and move to yellow state */
			HAL_GPIO_WritePin(EW_GREEN_GPIO_Port, EW_GREEN_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	481f      	ldr	r0, [pc, #124]	; (8000334 <EW_ROAD_Update+0x1d0>)
 80002b6:	f001 f86a 	bl	800138e <HAL_GPIO_WritePin>
			g_ew_state = TL_YELLOW;
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <EW_ROAD_Update+0x1c0>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]

			/* save new colour start time */
			ColorStartTime = OS_GetCurrentTick();
 80002c0:	f000 fbaa 	bl	8000a18 <OS_GetCurrentTick>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <EW_ROAD_Update+0x1c4>)
 80002c8:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 80002ca:	e025      	b.n	8000318 <EW_ROAD_Update+0x1b4>
	case TL_PEDESTRIAN:
	{
		/* Turn on red led */
		HAL_GPIO_WritePin(EW_RED_GPIO_Port, EW_RED_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2102      	movs	r1, #2
 80002d0:	4817      	ldr	r0, [pc, #92]	; (8000330 <EW_ROAD_Update+0x1cc>)
 80002d2:	f001 f85c 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 80002d6:	f000 fb9f 	bl	8000a18 <OS_GetCurrentTick>
 80002da:	4602      	mov	r2, r0
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <EW_ROAD_Update+0x1c4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	1ad2      	subs	r2, r2, r3
 80002e2:	4613      	mov	r3, r2
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	4413      	add	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	461a      	mov	r2, r3
 80002ec:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80002f0:	429a      	cmp	r2, r3
 80002f2:	d913      	bls.n	800031c <EW_ROAD_Update+0x1b8>
				>= TLC_PEDESTRIAN_TIME_S * 1000)
		{
			g_ew_state = TL_RED;
 80002f4:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <EW_ROAD_Update+0x1c0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
			ColorStartTime = redColorStartTime + (TLC_PEDESTRIAN_TIME_S * 1000/OS_TICK_TIME_MS);
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <EW_ROAD_Update+0x1c8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000302:	4a09      	ldr	r2, [pc, #36]	; (8000328 <EW_ROAD_Update+0x1c4>)
 8000304:	6013      	str	r3, [r2, #0]
		}

	}
		break;
 8000306:	e009      	b.n	800031c <EW_ROAD_Update+0x1b8>
	default:
		break;
 8000308:	bf00      	nop
 800030a:	e008      	b.n	800031e <EW_ROAD_Update+0x1ba>
		break;
 800030c:	bf00      	nop
 800030e:	e006      	b.n	800031e <EW_ROAD_Update+0x1ba>
		break;
 8000310:	bf00      	nop
 8000312:	e004      	b.n	800031e <EW_ROAD_Update+0x1ba>
		break;
 8000314:	bf00      	nop
 8000316:	e002      	b.n	800031e <EW_ROAD_Update+0x1ba>
		break;
 8000318:	bf00      	nop
 800031a:	e000      	b.n	800031e <EW_ROAD_Update+0x1ba>
		break;
 800031c:	bf00      	nop
	}
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000028 	.word	0x20000028
 8000328:	2000002c 	.word	0x2000002c
 800032c:	20000030 	.word	0x20000030
 8000330:	40010c00 	.word	0x40010c00
 8000334:	40010800 	.word	0x40010800

08000338 <NS_ROAD_Init>:
 * @brief Initializes the North-South road traffic light.
 * 
 * This function sets the initial state of the North-South road traffic light to green.
 */
void NS_ROAD_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	/* Init gpio (NA as done in the MX )*/
	g_ns_state = TL_RED_YELLOW;
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <NS_ROAD_Init+0x14>)
 800033e:	2202      	movs	r2, #2
 8000340:	701a      	strb	r2, [r3, #0]

}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	20000034 	.word	0x20000034

08000350 <NS_ROAD_Update>:
 * @brief Updates the state of the North-South road traffic light.
 * 
 * This function handles the state transitions of the traffic light based on the current state and time elapsed.
 */
void NS_ROAD_Update(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	static uint32_t ColorStartTime = 0;

	switch (g_ns_state)
 8000354:	4b70      	ldr	r3, [pc, #448]	; (8000518 <NS_ROAD_Update+0x1c8>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b04      	cmp	r3, #4
 800035a:	f200 80d0 	bhi.w	80004fe <NS_ROAD_Update+0x1ae>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <NS_ROAD_Update+0x14>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	08000379 	.word	0x08000379
 8000368:	080003c3 	.word	0x080003c3
 800036c:	0800041b 	.word	0x0800041b
 8000370:	08000477 	.word	0x08000477
 8000374:	080004bf 	.word	0x080004bf
	{
	case TL_RED:
	{
		/* Turn on red led */
		HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800037e:	4867      	ldr	r0, [pc, #412]	; (800051c <NS_ROAD_Update+0x1cc>)
 8000380:	f001 f805 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 8000384:	f000 fb48 	bl	8000a18 <OS_GetCurrentTick>
 8000388:	4602      	mov	r2, r0
 800038a:	4b65      	ldr	r3, [pc, #404]	; (8000520 <NS_ROAD_Update+0x1d0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	1ad2      	subs	r2, r2, r3
 8000390:	4613      	mov	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	461a      	mov	r2, r3
 800039a:	f245 53ef 	movw	r3, #21999	; 0x55ef
 800039e:	429a      	cmp	r2, r3
 80003a0:	f240 80af 	bls.w	8000502 <NS_ROAD_Update+0x1b2>
				>= TLC_NS_RED_TIME_S * 1000)
		{
			HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003aa:	485c      	ldr	r0, [pc, #368]	; (800051c <NS_ROAD_Update+0x1cc>)
 80003ac:	f000 ffef 	bl	800138e <HAL_GPIO_WritePin>
			g_ns_state = TL_RED_YELLOW;
 80003b0:	4b59      	ldr	r3, [pc, #356]	; (8000518 <NS_ROAD_Update+0x1c8>)
 80003b2:	2202      	movs	r2, #2
 80003b4:	701a      	strb	r2, [r3, #0]
			ColorStartTime = OS_GetCurrentTick();
 80003b6:	f000 fb2f 	bl	8000a18 <OS_GetCurrentTick>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a58      	ldr	r2, [pc, #352]	; (8000520 <NS_ROAD_Update+0x1d0>)
 80003be:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 80003c0:	e09f      	b.n	8000502 <NS_ROAD_Update+0x1b2>
	case TL_YELLOW:
	{
		/* Turn on yellow led */
		HAL_GPIO_WritePin(NS_YELLOW_GPIO_Port, NS_YELLOW_Pin, GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c8:	4854      	ldr	r0, [pc, #336]	; (800051c <NS_ROAD_Update+0x1cc>)
 80003ca:	f000 ffe0 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 80003ce:	f000 fb23 	bl	8000a18 <OS_GetCurrentTick>
 80003d2:	4602      	mov	r2, r0
 80003d4:	4b52      	ldr	r3, [pc, #328]	; (8000520 <NS_ROAD_Update+0x1d0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	1ad2      	subs	r2, r2, r3
 80003da:	4613      	mov	r3, r2
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	4413      	add	r3, r2
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003e6:	f0c0 808e 	bcc.w	8000506 <NS_ROAD_Update+0x1b6>
				>= TLC_NS_YELLOW_TIME_S * 1000)
		{
			/* Turn off yellow and move to red state */
			HAL_GPIO_WritePin(NS_YELLOW_GPIO_Port, NS_YELLOW_Pin,
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f0:	484a      	ldr	r0, [pc, #296]	; (800051c <NS_ROAD_Update+0x1cc>)
 80003f2:	f000 ffcc 	bl	800138e <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);

			if (TRUE == PEDESTRIAN_GetRequest())
 80003f6:	f000 f925 	bl	8000644 <PEDESTRIAN_GetRequest>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d103      	bne.n	8000408 <NS_ROAD_Update+0xb8>
			{
				g_ns_state = TL_PEDESTRIAN;
 8000400:	4b45      	ldr	r3, [pc, #276]	; (8000518 <NS_ROAD_Update+0x1c8>)
 8000402:	2204      	movs	r2, #4
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	e002      	b.n	800040e <NS_ROAD_Update+0xbe>
			}
			else
			{
				g_ns_state = TL_RED;
 8000408:	4b43      	ldr	r3, [pc, #268]	; (8000518 <NS_ROAD_Update+0x1c8>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
			}
			/* save new colour start time */
			ColorStartTime = OS_GetCurrentTick();
 800040e:	f000 fb03 	bl	8000a18 <OS_GetCurrentTick>
 8000412:	4603      	mov	r3, r0
 8000414:	4a42      	ldr	r2, [pc, #264]	; (8000520 <NS_ROAD_Update+0x1d0>)
 8000416:	6013      	str	r3, [r2, #0]

		}
	}
		break;
 8000418:	e075      	b.n	8000506 <NS_ROAD_Update+0x1b6>
	case TL_RED_YELLOW:
	{
		/* Turn on red and yellow leds */
		HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000420:	483e      	ldr	r0, [pc, #248]	; (800051c <NS_ROAD_Update+0x1cc>)
 8000422:	f000 ffb4 	bl	800138e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(NS_YELLOW_GPIO_Port, NS_YELLOW_Pin, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	483b      	ldr	r0, [pc, #236]	; (800051c <NS_ROAD_Update+0x1cc>)
 800042e:	f000 ffae 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 8000432:	f000 faf1 	bl	8000a18 <OS_GetCurrentTick>
 8000436:	4602      	mov	r2, r0
 8000438:	4b39      	ldr	r3, [pc, #228]	; (8000520 <NS_ROAD_Update+0x1d0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	1ad2      	subs	r2, r2, r3
 800043e:	4613      	mov	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800044a:	d35e      	bcc.n	800050a <NS_ROAD_Update+0x1ba>
				>= TLC_NS_RED_YELLOW_TIME_S * 1000)
		{
			HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000452:	4832      	ldr	r0, [pc, #200]	; (800051c <NS_ROAD_Update+0x1cc>)
 8000454:	f000 ff9b 	bl	800138e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(NS_YELLOW_GPIO_Port, NS_YELLOW_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045e:	482f      	ldr	r0, [pc, #188]	; (800051c <NS_ROAD_Update+0x1cc>)
 8000460:	f000 ff95 	bl	800138e <HAL_GPIO_WritePin>
			g_ns_state = TL_GREEN;
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <NS_ROAD_Update+0x1c8>)
 8000466:	2203      	movs	r2, #3
 8000468:	701a      	strb	r2, [r3, #0]
			ColorStartTime = OS_GetCurrentTick();
 800046a:	f000 fad5 	bl	8000a18 <OS_GetCurrentTick>
 800046e:	4603      	mov	r3, r0
 8000470:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <NS_ROAD_Update+0x1d0>)
 8000472:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8000474:	e049      	b.n	800050a <NS_ROAD_Update+0x1ba>
	case TL_GREEN:
	{
		/* Turn on green led */
		HAL_GPIO_WritePin(NS_GREEN_GPIO_Port, NS_GREEN_Pin, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800047c:	4827      	ldr	r0, [pc, #156]	; (800051c <NS_ROAD_Update+0x1cc>)
 800047e:	f000 ff86 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 8000482:	f000 fac9 	bl	8000a18 <OS_GetCurrentTick>
 8000486:	4602      	mov	r2, r0
 8000488:	4b25      	ldr	r3, [pc, #148]	; (8000520 <NS_ROAD_Update+0x1d0>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	1ad2      	subs	r2, r2, r3
 800048e:	4613      	mov	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4413      	add	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	461a      	mov	r2, r3
 8000498:	f243 63af 	movw	r3, #13999	; 0x36af
 800049c:	429a      	cmp	r2, r3
 800049e:	d936      	bls.n	800050e <NS_ROAD_Update+0x1be>
				>= TLC_NS_GREEN_TIME_S * 1000)
		{
			/* Turn off green and move to yellow state */
			HAL_GPIO_WritePin(NS_GREEN_GPIO_Port, NS_GREEN_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a6:	481d      	ldr	r0, [pc, #116]	; (800051c <NS_ROAD_Update+0x1cc>)
 80004a8:	f000 ff71 	bl	800138e <HAL_GPIO_WritePin>
			g_ns_state = TL_YELLOW;
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <NS_ROAD_Update+0x1c8>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]

			/* save new colour start time */
			ColorStartTime = OS_GetCurrentTick();
 80004b2:	f000 fab1 	bl	8000a18 <OS_GetCurrentTick>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a19      	ldr	r2, [pc, #100]	; (8000520 <NS_ROAD_Update+0x1d0>)
 80004ba:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 80004bc:	e027      	b.n	800050e <NS_ROAD_Update+0x1be>
	case TL_PEDESTRIAN:
	{
		/* Turn on red led */
		HAL_GPIO_WritePin(NS_RED_GPIO_Port, NS_RED_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c4:	4815      	ldr	r0, [pc, #84]	; (800051c <NS_ROAD_Update+0x1cc>)
 80004c6:	f000 ff62 	bl	800138e <HAL_GPIO_WritePin>
		if ((uint32_t)((OS_GetCurrentTick() - ColorStartTime ) * OS_TICK_TIME_MS)
 80004ca:	f000 faa5 	bl	8000a18 <OS_GetCurrentTick>
 80004ce:	4602      	mov	r2, r0
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <NS_ROAD_Update+0x1d0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1ad2      	subs	r2, r2, r3
 80004d6:	4613      	mov	r3, r2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	4413      	add	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	461a      	mov	r2, r3
 80004e0:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d914      	bls.n	8000512 <NS_ROAD_Update+0x1c2>
				>= TLC_PEDESTRIAN_TIME_S * 1000)
		{
			g_ns_state = TL_RED;
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <NS_ROAD_Update+0x1c8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
			ColorStartTime = OS_GetCurrentTick();
 80004ee:	f000 fa93 	bl	8000a18 <OS_GetCurrentTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <NS_ROAD_Update+0x1d0>)
 80004f6:	6013      	str	r3, [r2, #0]
			PEDESTRIAN_ClearRequest();
 80004f8:	f000 f8ae 	bl	8000658 <PEDESTRIAN_ClearRequest>
		}

	}
		break;
 80004fc:	e009      	b.n	8000512 <NS_ROAD_Update+0x1c2>
	default:
		break;
 80004fe:	bf00      	nop
 8000500:	e008      	b.n	8000514 <NS_ROAD_Update+0x1c4>
		break;
 8000502:	bf00      	nop
 8000504:	e006      	b.n	8000514 <NS_ROAD_Update+0x1c4>
		break;
 8000506:	bf00      	nop
 8000508:	e004      	b.n	8000514 <NS_ROAD_Update+0x1c4>
		break;
 800050a:	bf00      	nop
 800050c:	e002      	b.n	8000514 <NS_ROAD_Update+0x1c4>
		break;
 800050e:	bf00      	nop
 8000510:	e000      	b.n	8000514 <NS_ROAD_Update+0x1c4>
		break;
 8000512:	bf00      	nop
	}
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000034 	.word	0x20000034
 800051c:	40010c00 	.word	0x40010c00
 8000520:	20000038 	.word	0x20000038

08000524 <NS_ROAD_IsPedestrianActive>:
 * @brief Checks if the pedestrian mode is active on the North-South road.
 * 
 * @return BOOL Returns TRUE if the pedestrian mode is active, otherwise FALSE.
 */
BOOL NS_ROAD_IsPedestrianActive(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	return (TL_PEDESTRIAN == g_ns_state);
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <NS_ROAD_IsPedestrianActive+0x1c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b04      	cmp	r3, #4
 800052e:	bf0c      	ite	eq
 8000530:	2301      	moveq	r3, #1
 8000532:	2300      	movne	r3, #0
 8000534:	b2db      	uxtb	r3, r3
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000034 	.word	0x20000034

08000544 <PEDESTRIAN_Init>:
 * @brief Initializes the pedestrian traffic light and button.
 * 
 * This function sets up the GPIO pins for the pedestrian button and traffic light.
 */
void PEDESTRIAN_Init(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

	g_sw[pedestrianBtn].GPIOx = PEDESTRIAN_BUTTON_GPIO_Port;
 8000548:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <PEDESTRIAN_Init+0x70>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <PEDESTRIAN_Init+0x74>)
 8000550:	460b      	mov	r3, r1
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	440b      	add	r3, r1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	3304      	adds	r3, #4
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <PEDESTRIAN_Init+0x78>)
 800055e:	601a      	str	r2, [r3, #0]
	g_sw[pedestrianBtn].GPIO_Pin = PEDESTRIAN_BUTTON_Pin;
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <PEDESTRIAN_Init+0x70>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <PEDESTRIAN_Init+0x74>)
 8000568:	460b      	mov	r3, r1
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	440b      	add	r3, r1
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	3308      	adds	r3, #8
 8000574:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000578:	801a      	strh	r2, [r3, #0]
	g_sw[pedestrianBtn].PressedLogic = GPIO_PIN_SET;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <PEDESTRIAN_Init+0x70>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4619      	mov	r1, r3
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <PEDESTRIAN_Init+0x74>)
 8000582:	460b      	mov	r3, r1
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	330a      	adds	r3, #10
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
	g_sw[pedestrianBtn].Name = pedestrianBtn;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <PEDESTRIAN_Init+0x70>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <PEDESTRIAN_Init+0x70>)
 800059a:	7818      	ldrb	r0, [r3, #0]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <PEDESTRIAN_Init+0x74>)
 800059e:	460b      	mov	r3, r1
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	440b      	add	r3, r1
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	4602      	mov	r2, r0
 80005aa:	701a      	strb	r2, [r3, #0]

}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	2000003c 	.word	0x2000003c
 80005b8:	20000040 	.word	0x20000040
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <PEDESTRIAN_Update>:
 * @brief Updates the state of the pedestrian traffic light.
 * 
 * This function checks the pedestrian button state and updates the pedestrian traffic light accordingly.
 */
void PEDESTRIAN_Update(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

	if (SW_PRESSED == SW_GetState(pedestrianBtn))
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <PEDESTRIAN_Update+0x6c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f86d 	bl	80006a8 <SW_GetState>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d102      	bne.n	80005da <PEDESTRIAN_Update+0x1a>
	{
		pedestrianReq = TRUE;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <PEDESTRIAN_Update+0x70>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
	}

	if (TRUE == NS_ROAD_IsPedestrianActive())
 80005da:	f7ff ffa3 	bl	8000524 <NS_ROAD_IsPedestrianActive>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d110      	bne.n	8000606 <PEDESTRIAN_Update+0x46>
	{		HAL_UART_Transmit(&huart1, "PEDESTRIAN_ONNN\n", 18, 100);
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	2212      	movs	r2, #18
 80005e8:	4912      	ldr	r1, [pc, #72]	; (8000634 <PEDESTRIAN_Update+0x74>)
 80005ea:	4813      	ldr	r0, [pc, #76]	; (8000638 <PEDESTRIAN_Update+0x78>)
 80005ec:	f001 fb48 	bl	8001c80 <HAL_UART_Transmit>
		/* Turn on green Pedestrian led */
		HAL_GPIO_WritePin(PEDESTRIAN_GREEN_GPIO_Port, PEDESTRIAN_GREEN_Pin,
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <PEDESTRIAN_Update+0x7c>)
 80005f6:	f000 feca 	bl	800138e <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(PEDESTRIAN_RED_GPIO_Port, PEDESTRIAN_RED_Pin,
 80005fa:	2200      	movs	r2, #0
 80005fc:	2104      	movs	r1, #4
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <PEDESTRIAN_Update+0x7c>)
 8000600:	f000 fec5 	bl	800138e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PEDESTRIAN_GREEN_GPIO_Port, PEDESTRIAN_GREEN_Pin,
				GPIO_PIN_RESET);


	}
}
 8000604:	e00f      	b.n	8000626 <PEDESTRIAN_Update+0x66>
		HAL_UART_Transmit(&huart1, "PEDESTRIAN_Offf\n", 18, 100);
 8000606:	2364      	movs	r3, #100	; 0x64
 8000608:	2212      	movs	r2, #18
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <PEDESTRIAN_Update+0x80>)
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <PEDESTRIAN_Update+0x78>)
 800060e:	f001 fb37 	bl	8001c80 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(PEDESTRIAN_RED_GPIO_Port, PEDESTRIAN_RED_Pin,
 8000612:	2201      	movs	r2, #1
 8000614:	2104      	movs	r1, #4
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <PEDESTRIAN_Update+0x7c>)
 8000618:	f000 feb9 	bl	800138e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PEDESTRIAN_GREEN_GPIO_Port, PEDESTRIAN_GREEN_Pin,
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <PEDESTRIAN_Update+0x7c>)
 8000622:	f000 feb4 	bl	800138e <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000003c 	.word	0x2000003c
 8000630:	2000003d 	.word	0x2000003d
 8000634:	08002098 	.word	0x08002098
 8000638:	200000bc 	.word	0x200000bc
 800063c:	40010800 	.word	0x40010800
 8000640:	080020ac 	.word	0x080020ac

08000644 <PEDESTRIAN_GetRequest>:
 * @brief Gets the pedestrian request status.
 * 
 * @return BOOL Returns TRUE if a pedestrian request is active, otherwise FALSE.
 */
 BOOL PEDESTRIAN_GetRequest(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	return pedestrianReq;
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <PEDESTRIAN_GetRequest+0x10>)
 800064a:	781b      	ldrb	r3, [r3, #0]
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	2000003d 	.word	0x2000003d

08000658 <PEDESTRIAN_ClearRequest>:

 /*
  * @brief clear the pedestrian request status.
  */
void PEDESTRIAN_ClearRequest(void)
 {
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
 	pedestrianReq = FALSE;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <PEDESTRIAN_ClearRequest+0x14>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
 }
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000003d 	.word	0x2000003d

08000670 <SW_Init>:
 * @brief Initializes the switch module.
 * 
 * This function is intended to initialize the GPIO pins for the switches.
 */
void SW_Init(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	/* Init gpio (NA as done in the MX )*/

}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <SW_Update>:
 * @brief Updates the state of all switches.
 * 
 * This function monitors the state of each switch and updates its status.
 */
void SW_Update(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	for(sw_name_t i = 0 ;i< SW_MAX_NUM_;i++)
 8000682:	2300      	movs	r3, #0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	e006      	b.n	8000696 <SW_Update+0x1a>
	{
		sw_monitor(i);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f822 	bl	80006d4 <sw_monitor>
	for(sw_name_t i = 0 ;i< SW_MAX_NUM_;i++)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	3301      	adds	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0f5      	beq.n	8000688 <SW_Update+0xc>
	}
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <SW_GetState>:
 * 
 * @param name The name of the switch to check.
 * @return sw_state_t The current state of the switch (PRESSED or NOT_PRESSED).
 */
sw_state_t SW_GetState(sw_name_t name )
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	return g_sw[name].State;
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	4906      	ldr	r1, [pc, #24]	; (80006d0 <SW_GetState+0x28>)
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	440b      	add	r3, r1
 80006c0:	330b      	adds	r3, #11
 80006c2:	781b      	ldrb	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000040 	.word	0x20000040

080006d4 <sw_monitor>:
 * This function checks if a switch is pressed and updates its state accordingly.
 * 
 * @param name The name of the switch to monitor.
 */
static void sw_monitor(sw_name_t name)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState state = HAL_GPIO_ReadPin(g_sw[name].GPIOx, g_sw[name].GPIO_Pin);
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	4929      	ldr	r1, [pc, #164]	; (8000788 <sw_monitor+0xb4>)
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	3304      	adds	r3, #4
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	4925      	ldr	r1, [pc, #148]	; (8000788 <sw_monitor+0xb4>)
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	3308      	adds	r3, #8
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	f000 fe2c 	bl	8001360 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
	if (state != g_sw[name].PressedLogic)
 800070c:	79fa      	ldrb	r2, [r7, #7]
 800070e:	491e      	ldr	r1, [pc, #120]	; (8000788 <sw_monitor+0xb4>)
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	440b      	add	r3, r1
 800071a:	330a      	adds	r3, #10
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	7bfa      	ldrb	r2, [r7, #15]
 8000720:	429a      	cmp	r2, r3
 8000722:	d00f      	beq.n	8000744 <sw_monitor+0x70>
	{
		g_sw[name].State = SW_NOT_PRESSED;
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	4918      	ldr	r1, [pc, #96]	; (8000788 <sw_monitor+0xb4>)
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	330b      	adds	r3, #11
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
		g_sw_time[name] = 0;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <sw_monitor+0xb8>)
 800073c:	2100      	movs	r1, #0
 800073e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return ;
 8000742:	e01d      	b.n	8000780 <sw_monitor+0xac>
	}
	g_sw_time[name]++;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <sw_monitor+0xb8>)
 8000748:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800074c:	3201      	adds	r2, #1
 800074e:	b291      	uxth	r1, r2
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <sw_monitor+0xb8>)
 8000752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if ((g_sw_time[name]*SW_UPDATE_PERIOD) >=SW_MIN_SAMPLE_TIME_MS){
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <sw_monitor+0xb8>)
 800075a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800075e:	461a      	mov	r2, r3
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	2b63      	cmp	r3, #99	; 0x63
 800076a:	dd09      	ble.n	8000780 <sw_monitor+0xac>
		g_sw[name].State = SW_PRESSED;
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	4906      	ldr	r1, [pc, #24]	; (8000788 <sw_monitor+0xb4>)
 8000770:	4613      	mov	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4413      	add	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	330b      	adds	r3, #11
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
	}
}
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000040 	.word	0x20000040
 800078c:	2000004c 	.word	0x2000004c

08000790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0a      	blt.n	80007ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	490c      	ldr	r1, [pc, #48]	; (80007dc <__NVIC_SetPriority+0x4c>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b8:	e00a      	b.n	80007d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <__NVIC_SetPriority+0x50>)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	3b04      	subs	r3, #4
 80007c8:	0112      	lsls	r2, r2, #4
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	440b      	add	r3, r1
 80007ce:	761a      	strb	r2, [r3, #24]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e100 	.word	0xe000e100
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f7ff ffc2 	bl	8000790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <OS_voidInit>:
 * @brief Initializes the OS and configures the SysTick timer.
 * 
 * This function sets up the SysTick timer based on the system clock and the desired tick period.
 */
 void OS_voidInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	uint32_t time = (SystemCoreClock / 1000000) * 1000 * OS_TICK_PERIOD_MS;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <OS_voidInit+0x2c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a09      	ldr	r2, [pc, #36]	; (8000858 <OS_voidInit+0x30>)
 8000834:	fba2 2303 	umull	r2, r3, r2, r3
 8000838:	0c9b      	lsrs	r3, r3, #18
 800083a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	607b      	str	r3, [r7, #4]
	SysTick_Config(time);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffcd 	bl	80007e4 <SysTick_Config>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000
 8000858:	431bde83 	.word	0x431bde83

0800085c <OS_voidCreatTask>:
 * @param FristDelay The initial delay before the task starts.
 * @return eTaskStatus_t Returns TASK_SUCCESS if the task is created successfully, otherwise TASK_FAILED.
 */
eTaskStatus_t OS_voidCreatTask(uint32_t Priodicity, void (*pFunction)(void),
		uint32_t FristDelay)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	static uint8_t Piorirty = 0;
	eTaskStatus_t state = TASK_SUCCESS;
 8000868:	2301      	movs	r3, #1
 800086a:	75fb      	strb	r3, [r7, #23]
	/* Check that there is no task with the same piorirty */
	if ((OS_Tasks[Piorirty].pFunction == 0) && (Piorirty < MAX_TASKS_NUMBER))
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <OS_voidCreatTask+0xb0>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4a27      	ldr	r2, [pc, #156]	; (8000910 <OS_voidCreatTask+0xb4>)
 8000874:	460b      	mov	r3, r1
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4413      	add	r3, r2
 800087e:	3304      	adds	r3, #4
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d139      	bne.n	80008fa <OS_voidCreatTask+0x9e>
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <OS_voidCreatTask+0xb0>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d835      	bhi.n	80008fa <OS_voidCreatTask+0x9e>
	{
		OS_Tasks[Piorirty].Period = Priodicity;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <OS_voidCreatTask+0xb0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <OS_voidCreatTask+0xb4>)
 8000896:	460b      	mov	r3, r1
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	601a      	str	r2, [r3, #0]
		OS_Tasks[Piorirty].pFunction = pFunction;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <OS_voidCreatTask+0xb0>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <OS_voidCreatTask+0xb4>)
 80008ac:	460b      	mov	r3, r1
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	440b      	add	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	3304      	adds	r3, #4
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	601a      	str	r2, [r3, #0]
		OS_Tasks[Piorirty].State = Task_Ready; /* Put the sTask_t in init eTaskState_t */
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <OS_voidCreatTask+0xb0>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <OS_voidCreatTask+0xb4>)
 80008c4:	460b      	mov	r3, r1
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	440b      	add	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	330c      	adds	r3, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
		OS_Tasks[Piorirty].FristDelay = FristDelay;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <OS_voidCreatTask+0xb0>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <OS_voidCreatTask+0xb4>)
 80008dc:	460b      	mov	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	3308      	adds	r3, #8
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
		Piorirty++;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <OS_voidCreatTask+0xb0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <OS_voidCreatTask+0xb0>)
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e001      	b.n	80008fe <OS_voidCreatTask+0xa2>
	}
	else
	{
		state = TASK_FAILED;
 80008fa:	2300      	movs	r3, #0
 80008fc:	75fb      	strb	r3, [r7, #23]
	}
	return state;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000900:	4618      	mov	r0, r3
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	200000b8 	.word	0x200000b8
 8000910:	20000050 	.word	0x20000050

08000914 <OS_voidStart>:
 * @brief Starts the OS by enabling global interrupts.
 * 
 * This function is intended to enable global interrupts, allowing the OS to start scheduling tasks.
 */
void OS_voidStart(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	/* Enable Global Interrupt */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <OS_Scheduler>:
 * @brief The OS scheduler that manages task execution.
 * 
 * This function is called periodically to check and execute tasks that are ready to run.
 */
void OS_Scheduler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_TASKS_NUMBER; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	71fb      	strb	r3, [r7, #7]
 800092a:	e064      	b.n	80009f6 <OS_Scheduler+0xd6>
	{ /* Loop to select the function to run*/

		if ((OS_Tasks[i].pFunction != NULL)
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	4938      	ldr	r1, [pc, #224]	; (8000a10 <OS_Scheduler+0xf0>)
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	3304      	adds	r3, #4
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d056      	beq.n	80009f0 <OS_Scheduler+0xd0>
				&& (OS_Tasks[i].State == Task_Ready))
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	4932      	ldr	r1, [pc, #200]	; (8000a10 <OS_Scheduler+0xf0>)
 8000946:	4613      	mov	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	440b      	add	r3, r1
 8000950:	330c      	adds	r3, #12
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d14b      	bne.n	80009f0 <OS_Scheduler+0xd0>
		{ /* Check if it exist */

			if (OS_Tasks[i].FristDelay == 0)
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	492d      	ldr	r1, [pc, #180]	; (8000a10 <OS_Scheduler+0xf0>)
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	440b      	add	r3, r1
 8000966:	3308      	adds	r3, #8
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d12e      	bne.n	80009cc <OS_Scheduler+0xac>
			{

				OS_Tasks[i].FristDelay = OS_Tasks[i].Period - 1;
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	4927      	ldr	r1, [pc, #156]	; (8000a10 <OS_Scheduler+0xf0>)
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	1e59      	subs	r1, r3, #1
 8000982:	4823      	ldr	r0, [pc, #140]	; (8000a10 <OS_Scheduler+0xf0>)
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4403      	add	r3, r0
 800098e:	3308      	adds	r3, #8
 8000990:	6019      	str	r1, [r3, #0]
				OS_Tasks[i].RunMe++;
 8000992:	79fa      	ldrb	r2, [r7, #7]
 8000994:	491e      	ldr	r1, [pc, #120]	; (8000a10 <OS_Scheduler+0xf0>)
 8000996:	4613      	mov	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3310      	adds	r3, #16
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1c59      	adds	r1, r3, #1
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <OS_Scheduler+0xf0>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4403      	add	r3, r0
 80009b2:	3310      	adds	r3, #16
 80009b4:	6019      	str	r1, [r3, #0]
				OS_Tasks[i].pFunction();
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	4915      	ldr	r1, [pc, #84]	; (8000a10 <OS_Scheduler+0xf0>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	440b      	add	r3, r1
 80009c4:	3304      	adds	r3, #4
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4798      	blx	r3
 80009ca:	e011      	b.n	80009f0 <OS_Scheduler+0xd0>
			}
			else
			{
				OS_Tasks[i].FristDelay--;
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	4910      	ldr	r1, [pc, #64]	; (8000a10 <OS_Scheduler+0xf0>)
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	440b      	add	r3, r1
 80009da:	3308      	adds	r3, #8
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	1e59      	subs	r1, r3, #1
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <OS_Scheduler+0xf0>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	4413      	add	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4403      	add	r3, r0
 80009ec:	3308      	adds	r3, #8
 80009ee:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < MAX_TASKS_NUMBER; i++)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	3301      	adds	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d997      	bls.n	800092c <OS_Scheduler+0xc>
			}
		}

	}
	g_CurrentTick++;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <OS_Scheduler+0xf4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <OS_Scheduler+0xf4>)
 8000a04:	6013      	str	r3, [r2, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000050 	.word	0x20000050
 8000a14:	200000b4 	.word	0x200000b4

08000a18 <OS_GetCurrentTick>:
 * @brief Gets the current tick count of the OS.
 * 
 * @return uint32_t The current tick count.
 */
uint32_t OS_GetCurrentTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return g_CurrentTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <OS_GetCurrentTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	200000b4 	.word	0x200000b4

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a30:	f000 f9cc 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a34:	f000 f838 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a38:	f000 f89c 	bl	8000b74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a3c:	f000 f870 	bl	8000b20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, "Starting\n", 9, 100);
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	2209      	movs	r2, #9
 8000a44:	4912      	ldr	r1, [pc, #72]	; (8000a90 <main+0x64>)
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <main+0x68>)
 8000a48:	f001 f91a 	bl	8001c80 <HAL_UART_Transmit>
  NS_ROAD_Init();
 8000a4c:	f7ff fc74 	bl	8000338 <NS_ROAD_Init>
  EW_ROAD_Init();
 8000a50:	f7ff fb7c 	bl	800014c <EW_ROAD_Init>
  SW_Init();
 8000a54:	f7ff fe0c 	bl	8000670 <SW_Init>
  PEDESTRIAN_Init();
 8000a58:	f7ff fd74 	bl	8000544 <PEDESTRIAN_Init>
  OS_voidInit();
 8000a5c:	f7ff fee4 	bl	8000828 <OS_voidInit>

  OS_voidCreatTask(1, NS_ROAD_Update, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <main+0x6c>)
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fef9 	bl	800085c <OS_voidCreatTask>
  OS_voidCreatTask(1, EW_ROAD_Update, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	490b      	ldr	r1, [pc, #44]	; (8000a9c <main+0x70>)
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff fef4 	bl	800085c <OS_voidCreatTask>
  OS_voidCreatTask(1, SW_Update, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	490a      	ldr	r1, [pc, #40]	; (8000aa0 <main+0x74>)
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff feef 	bl	800085c <OS_voidCreatTask>
  OS_voidCreatTask(1, PEDESTRIAN_Update, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <main+0x78>)
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff feea 	bl	800085c <OS_voidCreatTask>
  OS_voidStart();
 8000a88:	f7ff ff44 	bl	8000914 <OS_voidStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a8c:	e7fe      	b.n	8000a8c <main+0x60>
 8000a8e:	bf00      	nop
 8000a90:	080020c0 	.word	0x080020c0
 8000a94:	200000bc 	.word	0x200000bc
 8000a98:	08000351 	.word	0x08000351
 8000a9c:	08000165 	.word	0x08000165
 8000aa0:	0800067d 	.word	0x0800067d
 8000aa4:	080005c1 	.word	0x080005c1

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fab6 	bl	8002028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fc6e 	bl	80013c0 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000aea:	f000 f8a5 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fedc 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b12:	f000 f891 	bl	8000c38 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3740      	adds	r7, #64	; 0x40
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_USART1_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART1_UART_Init+0x4c>)
 8000b58:	f001 f842 	bl	8001be0 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f869 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000bc 	.word	0x200000bc
 8000b70:	40013800 	.word	0x40013800

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <MX_GPIO_Init+0xb8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <MX_GPIO_Init+0xb8>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <MX_GPIO_Init+0xb8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_GPIO_Init+0xb8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <MX_GPIO_Init+0xb8>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_GPIO_Init+0xb8>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDESTRIAN_GREEN_Pin|PEDESTRIAN_RED_Pin|EW_GREEN_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2186      	movs	r1, #134	; 0x86
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000bbe:	f000 fbe6 	bl	800138e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EW_YELLOW_Pin|EW_RED_Pin|NS_RED_Pin|NS_YELLOW_Pin
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f247 0103 	movw	r1, #28675	; 0x7003
 8000bc8:	481a      	ldr	r0, [pc, #104]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000bca:	f000 fbe0 	bl	800138e <HAL_GPIO_WritePin>
                          |NS_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEDESTRIAN_GREEN_Pin PEDESTRIAN_RED_Pin EW_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN_GREEN_Pin|PEDESTRIAN_RED_Pin|EW_GREEN_Pin;
 8000bce:	2386      	movs	r3, #134	; 0x86
 8000bd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_GPIO_Init+0xbc>)
 8000be6:	f000 fa37 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : EW_YELLOW_Pin EW_RED_Pin NS_RED_Pin NS_YELLOW_Pin
                           NS_GREEN_Pin */
  GPIO_InitStruct.Pin = EW_YELLOW_Pin|EW_RED_Pin|NS_RED_Pin|NS_YELLOW_Pin
 8000bea:	f247 0303 	movw	r3, #28675	; 0x7003
 8000bee:	60bb      	str	r3, [r7, #8]
                          |NS_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000c04:	f000 fa28 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PEDESTRIAN_BUTTON_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN_BUTTON_Pin;
 8000c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c12:	2302      	movs	r3, #2
 8000c14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PEDESTRIAN_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_GPIO_Init+0xc0>)
 8000c1e:	f000 fa1b 	bl	8001058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_MspInit+0x40>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_MspInit+0x40>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_MspInit+0x40>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_MspInit+0x40>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_MspInit+0x40>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_MspInit+0x40>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <HAL_UART_MspInit+0x8c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d131      	bne.n	8000d0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_UART_MspInit+0x90>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <HAL_UART_MspInit+0x94>)
 8000cee:	f000 f9b3 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_UART_MspInit+0x94>)
 8000d08:	f000 f9a6 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40013800 	.word	0x40013800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010800 	.word	0x40010800

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 f877 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_Scheduler();
 8000d6a:	f7ff fdd9 	bl	8000920 <OS_Scheduler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
	...

08000d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d80:	f7ff fff7 	bl	8000d72 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d86:	490c      	ldr	r1, [pc, #48]	; (8000db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d9c:	4c09      	ldr	r4, [pc, #36]	; (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f001 f945 	bl	8002038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dae:	f7ff fe3d 	bl	8000a2c <main>
  bx lr
 8000db2:	4770      	bx	lr
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dbc:	08002100 	.word	0x08002100
  ldr r2, =_sbss
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc4:	20000108 	.word	0x20000108

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_Init+0x28>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x28>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f907 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	200f      	movs	r0, #15
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff ff2c 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f911 	bl	800103e <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f8e7 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000104 	.word	0x20000104

08000e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000104 	.word	0x20000104

08000e90 <__NVIC_SetPriorityGrouping>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_SetPriority>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <SysTick_Config>:
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff90 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff49 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff5e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5f 	bl	8000ef4 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffb0 	bl	8000fac <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b08b      	sub	sp, #44	; 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	e169      	b.n	8001340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800106c:	2201      	movs	r2, #1
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8158 	bne.w	800133a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a9a      	ldr	r2, [pc, #616]	; (80012f8 <HAL_GPIO_Init+0x2a0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d05e      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 8001094:	4a98      	ldr	r2, [pc, #608]	; (80012f8 <HAL_GPIO_Init+0x2a0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d875      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 800109a:	4a98      	ldr	r2, [pc, #608]	; (80012fc <HAL_GPIO_Init+0x2a4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d058      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010a0:	4a96      	ldr	r2, [pc, #600]	; (80012fc <HAL_GPIO_Init+0x2a4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d86f      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010a6:	4a96      	ldr	r2, [pc, #600]	; (8001300 <HAL_GPIO_Init+0x2a8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d052      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010ac:	4a94      	ldr	r2, [pc, #592]	; (8001300 <HAL_GPIO_Init+0x2a8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d869      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010b2:	4a94      	ldr	r2, [pc, #592]	; (8001304 <HAL_GPIO_Init+0x2ac>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d04c      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010b8:	4a92      	ldr	r2, [pc, #584]	; (8001304 <HAL_GPIO_Init+0x2ac>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d863      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010be:	4a92      	ldr	r2, [pc, #584]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d046      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010c4:	4a90      	ldr	r2, [pc, #576]	; (8001308 <HAL_GPIO_Init+0x2b0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d85d      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d82a      	bhi.n	8001124 <HAL_GPIO_Init+0xcc>
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d859      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <HAL_GPIO_Init+0x80>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	08001153 	.word	0x08001153
 80010dc:	0800112d 	.word	0x0800112d
 80010e0:	0800113f 	.word	0x0800113f
 80010e4:	08001181 	.word	0x08001181
 80010e8:	08001187 	.word	0x08001187
 80010ec:	08001187 	.word	0x08001187
 80010f0:	08001187 	.word	0x08001187
 80010f4:	08001187 	.word	0x08001187
 80010f8:	08001187 	.word	0x08001187
 80010fc:	08001187 	.word	0x08001187
 8001100:	08001187 	.word	0x08001187
 8001104:	08001187 	.word	0x08001187
 8001108:	08001187 	.word	0x08001187
 800110c:	08001187 	.word	0x08001187
 8001110:	08001187 	.word	0x08001187
 8001114:	08001187 	.word	0x08001187
 8001118:	08001187 	.word	0x08001187
 800111c:	08001135 	.word	0x08001135
 8001120:	08001149 	.word	0x08001149
 8001124:	4a79      	ldr	r2, [pc, #484]	; (800130c <HAL_GPIO_Init+0x2b4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800112a:	e02c      	b.n	8001186 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e029      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	3304      	adds	r3, #4
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e024      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	3308      	adds	r3, #8
 8001144:	623b      	str	r3, [r7, #32]
          break;
 8001146:	e01f      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	330c      	adds	r3, #12
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e01a      	b.n	8001188 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800115a:	2304      	movs	r3, #4
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e013      	b.n	8001188 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001168:	2308      	movs	r3, #8
 800116a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	611a      	str	r2, [r3, #16]
          break;
 8001172:	e009      	b.n	8001188 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001174:	2308      	movs	r3, #8
 8001176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	615a      	str	r2, [r3, #20]
          break;
 800117e:	e003      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x130>
          break;
 8001186:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2bff      	cmp	r3, #255	; 0xff
 800118c:	d801      	bhi.n	8001192 <HAL_GPIO_Init+0x13a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	e001      	b.n	8001196 <HAL_GPIO_Init+0x13e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3304      	adds	r3, #4
 8001196:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2bff      	cmp	r3, #255	; 0xff
 800119c:	d802      	bhi.n	80011a4 <HAL_GPIO_Init+0x14c>
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0x152>
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	3b08      	subs	r3, #8
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	210f      	movs	r1, #15
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	401a      	ands	r2, r3
 80011bc:	6a39      	ldr	r1, [r7, #32]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80b1 	beq.w	800133a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d8:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <HAL_GPIO_Init+0x2b8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_GPIO_Init+0x2b8>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b4a      	ldr	r3, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x2b8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011f0:	4a48      	ldr	r2, [pc, #288]	; (8001314 <HAL_GPIO_Init+0x2bc>)
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a40      	ldr	r2, [pc, #256]	; (8001318 <HAL_GPIO_Init+0x2c0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d013      	beq.n	8001244 <HAL_GPIO_Init+0x1ec>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3f      	ldr	r2, [pc, #252]	; (800131c <HAL_GPIO_Init+0x2c4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d00d      	beq.n	8001240 <HAL_GPIO_Init+0x1e8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a3e      	ldr	r2, [pc, #248]	; (8001320 <HAL_GPIO_Init+0x2c8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d007      	beq.n	800123c <HAL_GPIO_Init+0x1e4>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a3d      	ldr	r2, [pc, #244]	; (8001324 <HAL_GPIO_Init+0x2cc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d101      	bne.n	8001238 <HAL_GPIO_Init+0x1e0>
 8001234:	2303      	movs	r3, #3
 8001236:	e006      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 8001238:	2304      	movs	r3, #4
 800123a:	e004      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 800123c:	2302      	movs	r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <HAL_GPIO_Init+0x1ee>
 8001244:	2300      	movs	r3, #0
 8001246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4093      	lsls	r3, r2
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001256:	492f      	ldr	r1, [pc, #188]	; (8001314 <HAL_GPIO_Init+0x2bc>)
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	492c      	ldr	r1, [pc, #176]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	4928      	ldr	r1, [pc, #160]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 8001288:	4013      	ands	r3, r2
 800128a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	4922      	ldr	r1, [pc, #136]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	491e      	ldr	r1, [pc, #120]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4918      	ldr	r1, [pc, #96]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4914      	ldr	r1, [pc, #80]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012d8:	4013      	ands	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d021      	beq.n	800132c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	490e      	ldr	r1, [pc, #56]	; (8001328 <HAL_GPIO_Init+0x2d0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
 80012f4:	e021      	b.n	800133a <HAL_GPIO_Init+0x2e2>
 80012f6:	bf00      	nop
 80012f8:	10320000 	.word	0x10320000
 80012fc:	10310000 	.word	0x10310000
 8001300:	10220000 	.word	0x10220000
 8001304:	10210000 	.word	0x10210000
 8001308:	10120000 	.word	0x10120000
 800130c:	10110000 	.word	0x10110000
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	40010800 	.word	0x40010800
 800131c:	40010c00 	.word	0x40010c00
 8001320:	40011000 	.word	0x40011000
 8001324:	40011400 	.word	0x40011400
 8001328:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_GPIO_Init+0x304>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	4909      	ldr	r1, [pc, #36]	; (800135c <HAL_GPIO_Init+0x304>)
 8001336:	4013      	ands	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	3301      	adds	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	f47f ae8e 	bne.w	800106c <HAL_GPIO_Init+0x14>
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	372c      	adds	r7, #44	; 0x2c
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	807b      	strh	r3, [r7, #2]
 800139a:	4613      	mov	r3, r2
 800139c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800139e:	787b      	ldrb	r3, [r7, #1]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a4:	887a      	ldrh	r2, [r7, #2]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013aa:	e003      	b.n	80013b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	041a      	lsls	r2, r3, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	611a      	str	r2, [r3, #16]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e272      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8087 	beq.w	80014ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e0:	4b92      	ldr	r3, [pc, #584]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d00c      	beq.n	8001406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ec:	4b8f      	ldr	r3, [pc, #572]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d112      	bne.n	800141e <HAL_RCC_OscConfig+0x5e>
 80013f8:	4b8c      	ldr	r3, [pc, #560]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4b89      	ldr	r3, [pc, #548]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06c      	beq.n	80014ec <HAL_RCC_OscConfig+0x12c>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d168      	bne.n	80014ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e24c      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x76>
 8001428:	4b80      	ldr	r3, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a7f      	ldr	r2, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e02e      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x98>
 800143e:	4b7b      	ldr	r3, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7a      	ldr	r2, [pc, #488]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a77      	ldr	r2, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e01d      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0xbc>
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6e      	ldr	r2, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 800147c:	4b6b      	ldr	r3, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6a      	ldr	r2, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a67      	ldr	r2, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fcee 	bl	8000e7c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fcea 	bl	8000e7c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e200      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe4>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fcda 	bl	8000e7c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fcd6 	bl	8000e7c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1ec      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x10c>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d063      	beq.n	80015c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fa:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d11c      	bne.n	800154c <HAL_RCC_OscConfig+0x18c>
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d116      	bne.n	800154c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x176>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e1c0      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4939      	ldr	r1, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e03a      	b.n	80015c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d020      	beq.n	8001596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fc8f 	bl	8000e7c <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fc8b 	bl	8000e7c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1a1      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fc6e 	bl	8000e7c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc6a 	bl	8000e7c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e180      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d03a      	beq.n	8001644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d019      	beq.n	800160a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_RCC_OscConfig+0x274>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fc4e 	bl	8000e7c <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fc4a 	bl	8000e7c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e160      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f000 face 	bl	8001ba4 <RCC_Delay>
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_RCC_OscConfig+0x274>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fc34 	bl	8000e7c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	e00f      	b.n	8001638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fc30 	bl	8000e7c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d908      	bls.n	8001638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e146      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	42420000 	.word	0x42420000
 8001634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e9      	bne.n	8001618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a6 	beq.w	800179e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a87      	ldr	r2, [pc, #540]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b85      	ldr	r3, [pc, #532]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b82      	ldr	r3, [pc, #520]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b7f      	ldr	r3, [pc, #508]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7e      	ldr	r2, [pc, #504]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff fbf1 	bl	8000e7c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff fbed 	bl	8000e7c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e103      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	4b75      	ldr	r3, [pc, #468]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x312>
 80016c4:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	e02d      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x334>
 80016da:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a69      	ldr	r2, [pc, #420]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a66      	ldr	r2, [pc, #408]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x356>
 80016fc:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a60      	ldr	r2, [pc, #384]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a5d      	ldr	r2, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 8001716:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a5a      	ldr	r2, [pc, #360]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a57      	ldr	r2, [pc, #348]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff fba1 	bl	8000e7c <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fb9d 	bl	8000e7c <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0b1      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ee      	beq.n	800173e <HAL_RCC_OscConfig+0x37e>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fb8b 	bl	8000e7c <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fb87 	bl	8000e7c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e09b      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b3c      	ldr	r3, [pc, #240]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a3b      	ldr	r2, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d061      	beq.n	8001878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d146      	bne.n	800184a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0x4cc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb5b 	bl	8000e7c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fb57 	bl	8000e7c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e06d      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4921      	ldr	r1, [pc, #132]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a19      	ldr	r1, [r3, #32]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	430b      	orrs	r3, r1
 8001816:	491b      	ldr	r1, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x4cc>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fb2b 	bl	8000e7c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fb27 	bl	8000e7c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e03d      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x46a>
 8001848:	e035      	b.n	80018b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0x4cc>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fb14 	bl	8000e7c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fb10 	bl	8000e7c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e026      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x498>
 8001876:	e01e      	b.n	80018b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e019      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
 8001884:	40021000 	.word	0x40021000
 8001888:	40007000 	.word	0x40007000
 800188c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x500>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0d0      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d910      	bls.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0207 	bic.w	r2, r3, #7
 80018ee:	4965      	ldr	r1, [pc, #404]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800192a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d040      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e073      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4936      	ldr	r1, [pc, #216]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fa62 	bl	8000e7c <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff fa5e 	bl	8000e7c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e053      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d210      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1cc>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1d0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f9c0 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	080020cc 	.word	0x080020cc
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x36>
 8001ac6:	e027      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aca:	613b      	str	r3, [r7, #16]
      break;
 8001acc:	e027      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0c9b      	lsrs	r3, r3, #18
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d010      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	0c5b      	lsrs	r3, r3, #17
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afa:	fb03 f202 	mul.w	r2, r3, r2
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e004      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	613b      	str	r3, [r7, #16]
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	693b      	ldr	r3, [r7, #16]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	007a1200 	.word	0x007a1200
 8001b34:	080020e4 	.word	0x080020e4
 8001b38:	080020f4 	.word	0x080020f4
 8001b3c:	003d0900 	.word	0x003d0900

08001b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff2 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	080020dc 	.word	0x080020dc

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0adb      	lsrs	r3, r3, #11
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	080020dc 	.word	0x080020dc

08001ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <RCC_Delay+0x34>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <RCC_Delay+0x38>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0a5b      	lsrs	r3, r3, #9
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc0:	bf00      	nop
  }
  while (Delay --);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	60fa      	str	r2, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f9      	bne.n	8001bc0 <RCC_Delay+0x1c>
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	10624dd3 	.word	0x10624dd3

08001be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e042      	b.n	8001c78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff f83e 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f971 	bl	8001f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d175      	bne.n	8001d8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_UART_Transmit+0x2c>
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e06e      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2221      	movs	r2, #33	; 0x21
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cbe:	f7ff f8dd 	bl	8000e7c <HAL_GetTick>
 8001cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	88fa      	ldrh	r2, [r7, #6]
 8001cce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd8:	d108      	bne.n	8001cec <HAL_UART_Transmit+0x6c>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	e003      	b.n	8001cf4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cf4:	e02e      	b.n	8001d54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f848 	bl	8001d96 <UART_WaitOnFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e03a      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10b      	bne.n	8001d36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3302      	adds	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	e007      	b.n	8001d46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	781a      	ldrb	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	3301      	adds	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1cb      	bne.n	8001cf6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f814 	bl	8001d96 <UART_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e006      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	4613      	mov	r3, r2
 8001da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001da6:	e03b      	b.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dae:	d037      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db0:	f7ff f864 	bl	8000e7c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	6a3a      	ldr	r2, [r7, #32]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d302      	bcc.n	8001dc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e03a      	b.n	8001e40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d023      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b80      	cmp	r3, #128	; 0x80
 8001ddc:	d020      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d01d      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d116      	bne.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f81d 	bl	8001e48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2208      	movs	r2, #8
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e00f      	b.n	8001e40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d0b4      	beq.n	8001da8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b095      	sub	sp, #84	; 0x54
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	330c      	adds	r3, #12
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	e853 3f00 	ldrex	r3, [r3]
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e70:	643a      	str	r2, [r7, #64]	; 0x40
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e78:	e841 2300 	strex	r3, r2, [r1]
 8001e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e5      	bne.n	8001e50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3314      	adds	r3, #20
 8001e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	e853 3f00 	ldrex	r3, [r3]
 8001e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3314      	adds	r3, #20
 8001ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eac:	e841 2300 	strex	r3, r2, [r1]
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1e5      	bne.n	8001e84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d119      	bne.n	8001ef4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	e853 3f00 	ldrex	r3, [r3]
 8001ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f023 0310 	bic.w	r3, r3, #16
 8001ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	330c      	adds	r3, #12
 8001ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ee0:	61ba      	str	r2, [r7, #24]
 8001ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	e841 2300 	strex	r3, r2, [r1]
 8001eec:	613b      	str	r3, [r7, #16]
   return(result);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e5      	bne.n	8001ec0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f02:	bf00      	nop
 8001f04:	3754      	adds	r7, #84	; 0x54
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f46:	f023 030c 	bic.w	r3, r3, #12
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <UART_SetConfig+0x114>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f74:	f7ff fe02 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	e002      	b.n	8001f82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f7ff fdea 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	4a22      	ldr	r2, [pc, #136]	; (8002024 <UART_SetConfig+0x118>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	0119      	lsls	r1, r3, #4
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009a      	lsls	r2, r3, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <UART_SetConfig+0x118>)
 8001fba:	fba3 0302 	umull	r0, r3, r3, r2
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2064      	movs	r0, #100	; 0x64
 8001fc2:	fb00 f303 	mul.w	r3, r0, r3
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	3332      	adds	r3, #50	; 0x32
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <UART_SetConfig+0x118>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd8:	4419      	add	r1, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <UART_SetConfig+0x118>)
 8001ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2064      	movs	r0, #100	; 0x64
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	3332      	adds	r3, #50	; 0x32
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <UART_SetConfig+0x118>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	440a      	add	r2, r1
 8002016:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40013800 	.word	0x40013800
 8002024:	51eb851f 	.word	0x51eb851f

08002028 <memset>:
 8002028:	4603      	mov	r3, r0
 800202a:	4402      	add	r2, r0
 800202c:	4293      	cmp	r3, r2
 800202e:	d100      	bne.n	8002032 <memset+0xa>
 8002030:	4770      	bx	lr
 8002032:	f803 1b01 	strb.w	r1, [r3], #1
 8002036:	e7f9      	b.n	800202c <memset+0x4>

08002038 <__libc_init_array>:
 8002038:	b570      	push	{r4, r5, r6, lr}
 800203a:	2600      	movs	r6, #0
 800203c:	4d0c      	ldr	r5, [pc, #48]	; (8002070 <__libc_init_array+0x38>)
 800203e:	4c0d      	ldr	r4, [pc, #52]	; (8002074 <__libc_init_array+0x3c>)
 8002040:	1b64      	subs	r4, r4, r5
 8002042:	10a4      	asrs	r4, r4, #2
 8002044:	42a6      	cmp	r6, r4
 8002046:	d109      	bne.n	800205c <__libc_init_array+0x24>
 8002048:	f000 f81a 	bl	8002080 <_init>
 800204c:	2600      	movs	r6, #0
 800204e:	4d0a      	ldr	r5, [pc, #40]	; (8002078 <__libc_init_array+0x40>)
 8002050:	4c0a      	ldr	r4, [pc, #40]	; (800207c <__libc_init_array+0x44>)
 8002052:	1b64      	subs	r4, r4, r5
 8002054:	10a4      	asrs	r4, r4, #2
 8002056:	42a6      	cmp	r6, r4
 8002058:	d105      	bne.n	8002066 <__libc_init_array+0x2e>
 800205a:	bd70      	pop	{r4, r5, r6, pc}
 800205c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002060:	4798      	blx	r3
 8002062:	3601      	adds	r6, #1
 8002064:	e7ee      	b.n	8002044 <__libc_init_array+0xc>
 8002066:	f855 3b04 	ldr.w	r3, [r5], #4
 800206a:	4798      	blx	r3
 800206c:	3601      	adds	r6, #1
 800206e:	e7f2      	b.n	8002056 <__libc_init_array+0x1e>
 8002070:	080020f8 	.word	0x080020f8
 8002074:	080020f8 	.word	0x080020f8
 8002078:	080020f8 	.word	0x080020f8
 800207c:	080020fc 	.word	0x080020fc

08002080 <_init>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr

0800208c <_fini>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr
